import java.util.*;
public class App{
    public static int[] createRandomArray(int n) {
        int[] arr = new int[n];
        Random random = new Random();
        for (int i = 0; i < n; i++) {
            arr[i] = random.nextInt(100); 
        }
        return arr;
    }

    public static void bubbleSort(int[] array) {
        int i = array.length;
        for (int a = 0; a < i - 1; a++) {
            for (int b = 0; b < i - a - 1; b++) {
                if (array[b] > array[b + 1]) {
                    int temp = array[b];
                    array[b] = array[b + 1];
                    array[b + 1] = temp;
                }
            }
        }
    }
    
    public static void mergeSort(int[] arr, int left, int right) {
        if (right - left > 1) {
            int mid = (left + right) / 2;
            mergeSort(arr, left, mid);
            mergeSort(arr, mid, right);
            merge(arr, left, mid, right);
        }
    }

    public static void merge(int[] arr, int left, int mid, int right) {
        int[] leftArr = Arrays.copyOfRange(arr, left, mid);
        int[] rightArr = Arrays.copyOfRange(arr, mid, right);
        int k = 0;
        int o = 0;
        for (int i = left; i < right; i++) {
            if (k == leftArr.length) {
                arr[i] = rightArr[o++];
            } else if (o == rightArr.length) {
                arr[i] = leftArr[k++];
            } else if (leftArr[k] < rightArr[o]) {
                arr[i] = leftArr[k++];
            } else {
                arr[i] = rightArr[o++];
            }
        }
    }
   

    public static void mergeSort(int[] arr) {
        mergeSort(arr, 0, arr.length);
    }
   

     public static boolean isSorted(int[] arr){
        for(int i = 1; i<arr.length; i++){
            if(arr[i - 1] > arr[i]){
                return false;
            }
        }
        return true;
    }
    public static void main(String[] args) throws Exception {
        int[] arr = createRandomArray(5);
        int[] arr_copy = createRandomArray(5);
        System.out.println("Array before sorting: ");
        System.out.println(Arrays.toString(arr));
        mergeSort(arr);
        System.out.println("Array after sorting: ");
        System.out.println(Arrays.toString(arr));
        long mergesort_start_time = System.nanoTime();
        mergeSort(arr);
        long mergesort_end_time = System.nanoTime();
        System.out.println("Is array sorted?" + isSorted(arr));
        long mergesort_runtime = mergesort_end_time - mergesort_start_time;
        System.out.println("The sorted array is: " + Arrays.toString(arr));
        System.out.println("mergeSort Runtime:" + (mergesort_runtime) + "ms");
        System.out.println("");

        
        System.out.println("Array before sorting: ");
        System.out.println(Arrays.toString(arr_copy));
        long bubblesort_start_time = System.nanoTime();
        bubbleSort(arr_copy);
        long bubblesort_end_time = System.nanoTime();
        System.out.println("Is array sorted?" + isSorted(arr_copy));
        long bubblesort_runtime = bubblesort_end_time - bubblesort_start_time;
        System.out.println("The sorted array is: " + Arrays.toString(arr_copy));
        System.out.println("bubbleSort Runtime:" + (bubblesort_runtime) + "ms");
        System.out.println("");
    }
}
